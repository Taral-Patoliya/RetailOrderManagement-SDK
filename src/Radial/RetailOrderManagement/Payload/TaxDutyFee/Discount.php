<?php
/**
 * Copyright (c) 2014-2015 eBay Enterprise, Inc.
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * @copyright   Copyright (c) 2014-2015 eBay Enterprise, Inc. (http://www.ebayenterprise.com/)
 * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

namespace eBayEnterprise\RetailOrderManagement\Payload\TaxDutyFee;

use eBayEnterprise\RetailOrderManagement\Payload\IPayload;
use eBayEnterprise\RetailOrderManagement\Payload\IPayloadMap;
use eBayEnterprise\RetailOrderManagement\Payload\ISchemaValidator;
use eBayEnterprise\RetailOrderManagement\Payload\IValidatorIterator;
use eBayEnterprise\RetailOrderManagement\Payload\PayloadFactory;
use eBayEnterprise\RetailOrderManagement\Payload\TPayload;
use eBayEnterprise\RetailOrderManagement\Payload\Payment\TAmount;
use Psr\Log\LoggerInterface;
use Psr\Log\NullLogger;

class Discount implements IDiscount
{
    use TPayload, TAmount;

    /** @var string */
    protected $id;
    /** @var float */
    protected $amount;
    /** @var bool */
    protected $calculateDutyFlag;

    /**
     * @param IValidatorIterator
     * @param ISchemaValidator
     * @param IPayloadMap
     * @param LoggerInterface
     * @param IPayload
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function __construct(
        IValidatorIterator $validators,
        ISchemaValidator $schemaValidator,
        IPayloadMap $payloadMap,
        LoggerInterface $logger,
        IPayload $parentPayload = null
    ) {
        $this->logger = $logger;
        $this->schemaValidator = $schemaValidator;
        $this->validators = $validators;
        $this->payloadMap = $payloadMap;
        $this->parentPayload = $parentPayload;
        $this->payloadFactory = new PayloadFactory;

        $this->extractionPaths = [
            'amount' => 'number(x:Amount)',
        ];
        $this->optionalExtractionPaths = [
            'id' => '@id',
        ];
        $this->booleanExtractionPaths = [
            'calculateDutyFlag' => 'string(@calculateDuty)',
        ];
    }

    /**
     * Unique id for the promotion. Typically generated by the webstore.
     *
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @param string
     * @return self
     */
    public function setId($id)
    {
        $this->id = $id;
        return $this;
    }

    /**
     * Calculated currency amount of the discount.
     *
     * restrictions: two decimal, non-negative
     * @return float
     */
    public function getAmount()
    {
        return $this->amount;
    }

    /**
     * @param float
     * @return self
     */
    public function setAmount($amount)
    {
        $this->amount = $this->sanitizeAmount($amount);
        return $this;
    }

    /**
     * Whether duty needs to be calculated for the discount. It will be ignored
     * for all other line items except 'Merchandise' and 'Shipping', (Cost
     * Including Freight calculation only). If overall duty is not present in
     * input, then this flag will be ignored and duty will be calculated for
     * all available discounts.
     *
     * restrictions: optional
     * @return bool
     */
    public function getCalculateDutyFlag()
    {
        return $this->calculateDutyFlag;
    }

    /**
     * @param bool
     * @return self
     */
    public function setCalculateDutyFlag($flag)
    {
        $this->calculateDutyFlag = $this->convertStringToBoolean($flag);
        return $this;
    }

    protected function getRootNodeName()
    {
        return 'Discount';
    }

    protected function getXmlNamespace()
    {
        return static::XML_NS;
    }

    /**
     * get name-value pairs to be serialized as attributes to the root
     * element.
     * @return array
     */
    protected function getRootAttributes()
    {
        $attrs = [];
        if ($this->getId()) {
            $attrs['id'] = $this->getId();
        }
        $flag = $this->getCalculateDutyFlag();
        if ($flag === true || $flag === false) {
            $attrs['calculateDuty'] = $this->convertBooleanToString($this->getCalculateDutyFlag());
        }
        return $attrs;
    }


    /**
     * serialize the internals of the payload
     *
     * @return string
     */
    protected function serializeContents()
    {
        return "<Amount>{$this->formatAmount($this->getAmount())}</Amount>";
    }

    /**
     * ensure data is sanitized
     * @return self
     */
    protected function deserializeExtra()
    {
        $this->setAmount($this->amount);
        return $this;
    }
}
