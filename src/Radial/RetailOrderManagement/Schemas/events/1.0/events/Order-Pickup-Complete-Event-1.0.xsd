<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://api.gsicommerce.com/schema/checkout/1.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema" targetNamespace="http://api.gsicommerce.com/schema/checkout/1.0" elementFormDefault="qualified" attributeFormDefault="unqualified" version="${project.version}">
  <xsd:include schemaLocation="../../../checkout/1.0/Checkout-Datatypes-1.0.xsd"/>
  <xsd:include schemaLocation="../../../checkout/1.0/Order-Datatypes-Common-1.0.xsd"/>
  <xsd:element name="OrderPickupComplete" type="OrderPickupCompleteType" nillable="false"/>
  <xsd:complexType name="OrderPickupCompleteType">
    <xsd:sequence>
      <xsd:element name="Customer" type="OrderPickupCompleteCustomerType"/>
      <xsd:element name="OrderItems" type="OrderPickupCompleteItemListType"/>
      <xsd:element name="Destination" type="OrderPickupCompleteDestinationType"/>
      <xsd:any namespace="##any" processContents="skip" minOccurs="0" maxOccurs="unbounded">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">
                        This xsd:any element indicates that future optional elements may show up in this location of the XML document in the
                        responses returned from the service.
                        The purpose of this xsd:any element is to define a more robust service interface that allows for new, optional elements to be added
                        to the service's responses without the service clients' code throwing exceptions.
                        The client code for this service call should be written to not break if new optional XML elements show up in this part
                        of the service response.  Modern XML marshalling frameworks often process xsd:any elements properly out-of-the-box
                        (for example, in Java, JAXB and JibX XML marshalling frameworks both honor xsd:any elements and don't throw exceptions
                        if new optional elements appear within the xsd:any section of the XML document).
                        Developers' unit tests of their service client code should include a test case where this reply message
                        contains one or more new elements in this location of the XML document.
                        If new optional elements are added to this interface, a new schema will be created, communications will be sent out,
                        and you will have the option to modify your service client code to process and use the new elements.
                        If there is no need/desire to process the new optional elements, your service client should continue to run
                        uninterrupted as long as it is built to honor this xsd:any element.
                    </xsd:documentation>
        </xsd:annotation>
      </xsd:any>
    </xsd:sequence>
    <xsd:attribute name="customerOrderId" type="OrderId" use="optional">
      <xsd:annotation>
        <xsd:documentation>The order id generated by the webstore.
                    Allowable Values: Text string
                    Required: No
                    Length: TBD
                    Default Value: blank
                    Restrictions: N/A
                    Aliases: N/A</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="storeId" type="xsd:string"/>
    <xsd:attribute name="currency" type="ISOCurrencyCodeType" use="required"/>
    <xsd:attribute name="currencySymbol" type="xsd:string" use="required"/>
  </xsd:complexType>
  <xsd:complexType name="OrderPickupCompleteCustomerType">
    <xsd:annotation>
      <xsd:documentation>Contains customer information including name and loyalty program information.</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Name" type="PersonNameType">
        <xsd:annotation>
          <xsd:documentation>The customer name is the same as the order payment name. GSI currently does not support different names for Billing and
                        Payment information, </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="EmailAddress" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>Customer Email address, for example: mike@gsicommerce.com

                        Allowable Values: Text string
                        Required: Yes
                        Length: 150 characters
                        Default Value: blank
                        Restrictions: N/A
                        Aliases: N/A                     </xsd:documentation>
        </xsd:annotation>
        <xsd:simpleType>
          <xsd:restriction base="xsd:string">
            <xsd:maxLength value="150"/>
          </xsd:restriction>
        </xsd:simpleType>
      </xsd:element>
      <xsd:element name="LoyaltyPrograms" type="LoyaltyPrograms" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>Contains loyalty program information for the customer.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
    <xsd:attribute name="customerId" type="CustomerIdType" use="optional">
      <xsd:annotation>
        <xsd:documentation>Assigned by the system that is taking the order. This can be either an ID created by the customer, for example, when the customer created an account, or, if the customer did not want to create an account, the system creates an ID, which is then used for guest checkouts. Therefore this field always has a value, even if the customer does not actively create an account.

                    Allowable Values: Text string
                    Required: No
                    Length: 40
                    Default Value: blank
                    Restrictions: Must be unique for each customer.
                    Aliases: N/A</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="OrderPickupCompleteItemListType">
    <xsd:sequence>
      <xsd:element name="OrderItem" type="OrderPickupCompleteItemType" nillable="false" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="OrderPickupCompleteItemType">
    <xsd:sequence>
      <xsd:element name="Description" type="OrderPickupCompleteProductDescriptionType" minOccurs="0"/>
      <xsd:element name="Pricing" type="OrderPickupCompleteItemPriceType"/>
      <xsd:element name="ReleaseStatuses" type="OrderPickupCompleteReleaseStatusListType" minOccurs="1"/>
      <xsd:element name="ProxyInformation" type="OrderPickupCompleteProxyType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:attribute name="webLineId" type="OrderItemLineNumber" use="required">
      <xsd:annotation>
        <xsd:documentation>
                    Required field when submitting an order. Can be used by the webstore to
                    retain the sequence in which items were displayed in the basket.
                </xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="itemId" type="ItemId"/>
  </xsd:complexType>
  <xsd:complexType name="OrderPickupCompleteDestinationType">
    <xsd:sequence>
      <xsd:element name="StoreFrontDetail" type="StoreFrontDetails"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="OrderPickupCompleteProductDescriptionType">
    <xsd:complexContent>
      <xsd:extension base="ProductDescriptionBaseType">
        <xsd:sequence>
          <xsd:element name="Title" type="xsd:string"/>
          <xsd:element name="Color" type="ColorShippedType" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                                Optional product color in the locale in which the order was taken.
                            </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element name="Size" type="SizeShippedType" minOccurs="0">
            <xsd:annotation>
              <xsd:documentation>
                                Optional product productSize in the locale in which the order was taken.
                            </xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="ColorShippedType">
    <xsd:simpleContent>
      <xsd:extension base="xsd:string">
        <xsd:attribute name="id" use="optional"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="SizeShippedType">
    <xsd:simpleContent>
      <xsd:extension base="xsd:string">
        <xsd:attribute name="id" use="optional"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="OrderPickupCompleteItemPriceType">
    <xsd:sequence>
      <xsd:element name="Amount" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>This field is a computed amount that is valued from the OMS.  It is based on the unit price and other fields that impact the order's total.. For example, the total amount would be $380, if you start with two $200 items,and then take a 5% discount off the order. All line items in an order must have a shipping type specified. If this is not the case, the shipping type must be defined at the order level, at which point line items that do not have shipping specified will inherit that value. If the shipping type is not defined for all line items, and is not defined at the order level, the entire order is not released for shipping.
                        Allowable Values: Text string
                        Required: No
                        Length: TBD
                        Default Value: blank
                        Restrictions: N/A
                        Aliases: N/A</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:simpleContent>
            <xsd:extension base="AmountBaseType">
              <xsd:annotation>
                <xsd:documentation>
                                    Remainder refers to the VAT (Value Added Tax.. the price of the item already
                                    has tax included) remainder that can occur when
                                    the total amount divided by the order item quantity does not come out even.

                                    Amount - remainder = UnitPrice * Quantity
                                    Amount = (UnitPrice * Quantity) + remainder

                                    For example, Amount is 100 and the quantity is 3.
                                    The amount would be 100.00, the remainder would be 0.01, and
                                    the UnitPrice would be 33.33.

                                </xsd:documentation>
              </xsd:annotation>
              <xsd:attribute name="remainder" type="AmountBaseType" use="optional">
                <xsd:annotation>
                  <xsd:documentation>This field contains an amount that is added to the odd item.  For example if the promotion is buy 3 items for $10, this amount shows $0.01, and if it is buy 3 for $100, then the remainder is $1.  This is used when you cannot enter different unit prices for multiple items on a single line.
                                        Allowable Values: Text string
                                        Required: No
                                        Length: TBD
                                        Default Value: blank
                                        Restrictions: N/A
                                        Aliases: N/A</xsd:documentation>
                </xsd:annotation>
              </xsd:attribute>
            </xsd:extension>
          </xsd:simpleContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="UnitPrice" type="AmountBaseType" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>This fields indicates the individual unit price for each item on the line (before any discounts are applied)  If a clinet isn't using our discounting capability, then this is broken down into the Net unit price after any discounting that was already done. OMS requires this field and any rounded charges for line total.
                        Allowable Values: Decimal
                        Required: Not by the schema, but OMS requires the value from this field.
                        Length: TBD
                        Default Value: blank
                        Restrictions: N/A
                        Aliases: N/A</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="OrderPickupCompleteReleaseStatusListType">
    <xsd:sequence>
      <xsd:element name="ReleaseStatus" type="ReleaseStatusType" maxOccurs="unbounded" minOccurs="1"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ReleaseStatusType">
    <xsd:attribute name="statusCode" type="xsd:string"/>
    <xsd:attribute name="statusDescription" type="xsd:string"/>
    <xsd:attribute name="quantity" type="xsd:decimal"/>
    <xsd:attribute name="shipmentQuantity" type="xsd:decimal"/>
    <xsd:attribute name="totalQuantity" type="xsd:decimal"/>
  </xsd:complexType>
  <xsd:complexType name="OrderPickupCompleteProxyType">
    <xsd:sequence>
      <xsd:element name="ProxyName" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ProxyFirstName" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ProxyLastName" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ProxyEmail" type="xsd:string" minOccurs="0"/>
      <xsd:element name="ProxyPhone" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Address" type="ProxyPickupAddress" minOccurs="0"/>
      <xsd:element name="Relationship" type="xsd:string" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ProxyPickupAddress">
    <xsd:annotation>
      <xsd:documentation>
                This address type is used on an order item when a proxy pickup is used and the
                user enters their address.  It is a subset of a physical address
            </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="Line1" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Line2" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Line3" type="xsd:string" minOccurs="0"/>
      <xsd:element name="Line4" type="xsd:string" minOccurs="0"/>
      <xsd:element name="City" type="xsd:string" minOccurs="0"/>
      <xsd:element name="MainDivisionCode" type="xsd:string" minOccurs="0">
        <xsd:annotation>
          <xsd:documentation>
                        Typically a two- or three-digit postal abbreviation for
                        the state or province.  Mainly used in Canada and the US.
                        This does not necessarily conform to the ISO 3166-2 code.
                    </xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element name="CountryCode" type="xsd:string" minOccurs="0"/>
      <xsd:element name="PostalCode" type="xsd:string" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
</xsd:schema>
