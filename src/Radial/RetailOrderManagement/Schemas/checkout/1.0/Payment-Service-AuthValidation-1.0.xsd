<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            elementFormDefault="qualified" 
            attributeFormDefault="unqualified"
            targetNamespace="http://api.gsicommerce.com/schema/checkout/1.0"
            xmlns="http://api.gsicommerce.com/schema/checkout/1.0"
            version="${project.version}" >
  
<xsd:include schemaLocation="Payment-Datatypes-1.0.xsd"/>
<xsd:include schemaLocation="Checkout-Datatypes-1.0.xsd"/>

<xsd:element name="AuthValidationRequest" type="AuthValidationRequestType">
	<xsd:annotation>
		<xsd:documentation xml:lang="en">The request message for Payment Authorization Validation operation
      </xsd:documentation>
	</xsd:annotation>
</xsd:element>
<xsd:element name="AuthValidationReply" type="AuthValidationReplyType">
	<xsd:annotation>
		<xsd:documentation xml:lang="en">The reply message for Payment Authorization Validation operation
      </xsd:documentation>
	</xsd:annotation>
</xsd:element>

<xsd:complexType name="AuthValidationRequestType" >
	<xsd:sequence>
			<xsd:choice>
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Payment context combines with the tender type in the URI to	uniquely identify a Payment Transaction for an order. Some tenders do not pass a PaymentAccountUniqueId in the payment context.             </xsd:documentation>
				</xsd:annotation>
				<xsd:element name="PaymentContextBase" type="PaymentContextBaseType">
					<xsd:annotation>
						<xsd:documentation>Payment context without a PaymentAccountUniqueId.
							PayPal is one tender that does not have a PaymentAccountUniqueId for auth cancel transaction.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="PaymentContext" type="PaymentContextType">
					<xsd:annotation>
						<xsd:documentation>Payment context with a PaymentAccountUniqueId.
	         		</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
	</xsd:sequence>
	<xsd:attribute name="requestId" type="RequestId" use="required">
			<xsd:annotation>
				<xsd:documentation>A unique identifier for the request. The client is responsible for ensuring uniqueness across all requests the client initiates with this service.

Allowable Values: Text string
Required: No
Length: 20
Default Value: blank
Restrictions: N/A
Aliases: N/A       </xsd:documentation>
		</xsd:annotation>
	</xsd:attribute>
	<xsd:attribute name="sessionId" type="RequestId" use="optional"/>
</xsd:complexType>

<xsd:complexType name="AuthValidationReplyType">
	<xsd:sequence>
			<xsd:choice>
				<xsd:annotation>
					<xsd:documentation xml:lang="en">Payment context combines with the tender type in the URI to	uniquely identify a Payment Transaction for an order. Some tenders do not pass a PaymentAccountUniqueId in the payment context.             </xsd:documentation>
				</xsd:annotation>
				<xsd:element name="PaymentContextBase" type="PaymentContextBaseType">
					<xsd:annotation>
						<xsd:documentation>Payment context without a PaymentAccountUniqueId.
							PayPal is one tender that does not have a PaymentAccountUniqueId for auth cancel transaction.        		
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="PaymentContext" type="PaymentContextType">
					<xsd:annotation>
						<xsd:documentation>Payment context with a PaymentAccountUniqueId.
	         		</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:choice>
			<xsd:element name="AuthValid" type="xsd:boolean" />
            <xsd:element name="AuthRetryable" type="xsd:boolean" />
            <xsd:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="skip" >
          		<xsd:annotation>
              		<xsd:documentation xml:lang="en">
	                  This xsd:any element indicates that future optional elements may show up in this location of the XML document in the
	                  responses returned from the service.
	                  The purpose of this xsd:any element is to define a more robust service interface that allows for new, optional elements to be added
	                  to the service's responses without the service clients' code throwing exceptions.
	                  The client code for this service call should be written to not break if new optional XML elements show up in this part
	                  of the service response.  Modern XML marshalling frameworks often process xsd:any elements properly out-of-the-box
	                  (for example, in Java, JAXB and JibX XML marshalling frameworks both honor xsd:any elements and don't throw exceptions
	                  if new optional elements appear within the xsd:any section of the XML document).
	                  Developers' unit tests of their service client code should include a test case where this reply message
	                  contains one or more new elements in this location of the XML document.
	                  If new optional elements are added to this interface, a new schema will be created, communications will be sent out,
	                  and you will have the option to modify your service client code to process and use the new elements.
	                  If there is no need/desire to process the new optional elements, your service client should continue to run
	                  uninterrupted as long as it is built to honor this xsd:any element.
              		</xsd:documentation>
          		</xsd:annotation>
      		</xsd:any>
	</xsd:sequence>
	<xsd:attribute name="sessionId" type="RequestId" use="optional"/>
</xsd:complexType>

</xsd:schema>